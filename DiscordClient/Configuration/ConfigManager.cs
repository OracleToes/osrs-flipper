using Config.Net;
using OsrsFlipper;

namespace DiscordClient.Configuration;

public static class ConfigManager
{
    public static IBotConfig BotConfig { get; private set; } = null!;
    public static IFilterConfig FilterConfig { get; private set; } = null!;


    public static void Initialize()
    {
        Logger.Info("Initializing configuration...");
        
        // Create necessary directories.
        DirectoryInfo configDirectory = Directory.CreateDirectory("config");
        
        // Bot configuration
        string botConfigPath = Path.Combine(configDirectory.FullName, "config_bot.json");
        BotConfig = new ConfigurationBuilder<IBotConfig>()
            .UseJsonFile(botConfigPath)
            .Build();
        
        // Filters configuration
        string filterConfigPath = Path.Combine(configDirectory.FullName, "config_filters.json");
        FilterConfig = new ConfigurationBuilder<IFilterConfig>()
            .UseJsonFile(filterConfigPath)
            .Build();

        if (!File.Exists(botConfigPath))
        {
            // Force the config file to be regenerated by setting a value in the config.
            BotConfig.Token = BotConfig.Token;
            BotConfig.Owners = BotConfig.Owners;
            BotConfig.DumpTargetChannelName = BotConfig.DumpTargetChannelName;
            Logger.Warn("Bot configuration file not found. Generating a new one...");
        }

        if (!File.Exists(filterConfigPath))
        {
            // Force the config file to be regenerated by setting a value in the config.
            FilterConfig.CooldownMinutes = FilterConfig.CooldownMinutes;
            FilterConfig.MaxTransactionAgeLow = FilterConfig.MaxTransactionAgeLow;
            FilterConfig.MaxTransactionAgeHigh = FilterConfig.MaxTransactionAgeHigh;
            FilterConfig.AveragePrice24HMin = FilterConfig.AveragePrice24HMin;
            FilterConfig.AveragePrice24HMax = FilterConfig.AveragePrice24HMax;
            FilterConfig.TransactionVolumeMin = FilterConfig.TransactionVolumeMin;
            FilterConfig.RoiMinPercentage = FilterConfig.RoiMinPercentage;
            FilterConfig.AverageVolatility30MinMaxPercentage = FilterConfig.AverageVolatility30MinMaxPercentage;
            FilterConfig.PotentialProfitMin = FilterConfig.PotentialProfitMin;
            FilterConfig.PotentialProfitIncludeUnknownLimit = FilterConfig.PotentialProfitIncludeUnknownLimit;
            FilterConfig.MaxHighIncreasePercentage = FilterConfig.MaxHighIncreasePercentage;
            FilterConfig.PriceDropMin = FilterConfig.PriceDropMin;
            Logger.Warn("Filter configuration file not found. Generating a new one...");
        }
        
        Logger.Info("Configuration files initialized.");
    }
    
    
    public static Flipper.Config GetFlipperConfig()
    {
        return new Flipper.Config
        {
            PruneCooldownMinutes = FilterConfig.CooldownMinutes,
            PruneMaxTransactionAgeLow = FilterConfig.MaxTransactionAgeLow,
            PruneMaxTransactionAgeHigh = FilterConfig.MaxTransactionAgeHigh,
            PruneAveragePrice24HMin = FilterConfig.AveragePrice24HMin,
            PruneAveragePrice24HMax = FilterConfig.AveragePrice24HMax,
            PruneTransactionVolumeMin = FilterConfig.TransactionVolumeMin,
            PruneRoiMinPercentage = FilterConfig.RoiMinPercentage,
            PruneAverageVolatility30MinMaxPercentage = FilterConfig.AverageVolatility30MinMaxPercentage,
            FlipPotentialProfitMin = FilterConfig.PotentialProfitMin,
            FlipPotentialProfitIncludeUnknownLimit = FilterConfig.PotentialProfitIncludeUnknownLimit,
            MaxHighIncreasePercentage = FilterConfig.MaxHighIncreasePercentage,
            PriceDropMin = FilterConfig.PriceDropMin
        };
    }
}